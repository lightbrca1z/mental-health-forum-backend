FROM php:8.2-cli-alpine

# Install system dependencies
RUN apk add --no-cache \
    git \
    curl \
    libpng-dev \
    oniguruma-dev \
    libxml2-dev \
    zip \
    unzip \
    sqlite \
    sqlite-dev \
    pkgconfig \
    autoconf \
    build-base

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_sqlite mbstring exif pcntl bcmath gd

# Get latest Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www

# Copy composer files first for better caching
COPY composer.json composer.lock ./

# Install dependencies (without artisan discovery)
RUN composer install --no-dev --optimize-autoloader --no-interaction --no-scripts

# Copy existing application directory contents
COPY . /var/www

# Run artisan commands after all files are copied
RUN php artisan package:discover --ansi

# Create database directory and file
RUN mkdir -p /var/www/database
RUN touch /var/www/database/database.sqlite

# Set permissions
RUN chown -R www-data:www-data /var/www
RUN chmod -R 755 /var/www/storage
RUN chmod -R 755 /var/www/bootstrap/cache
RUN chmod 664 /var/www/database/database.sqlite

# Create startup script
RUN echo '#!/bin/sh' > /start.sh && \
    echo 'set -e' >> /start.sh && \
    echo 'echo "Starting Laravel application..."' >> /start.sh && \
    echo 'echo "Current directory: $(pwd)"' >> /start.sh && \
    echo 'echo "Files in current directory:"' >> /start.sh && \
    echo 'ls -la' >> /start.sh && \
    echo 'if [ ! -f .env ]; then' >> /start.sh && \
    echo '  echo "Creating .env file..."' >> /start.sh && \
    echo '  if [ -f .env.example ]; then' >> /start.sh && \
    echo '    cp .env.example .env' >> /start.sh && \
    echo '  else' >> /start.sh && \
    echo '    echo "APP_NAME=Laravel" > .env' >> /start.sh && \
    echo '    echo "APP_ENV=production" >> .env' >> /start.sh && \
    echo '    echo "APP_KEY=" >> .env' >> /start.sh && \
    echo '    echo "APP_DEBUG=false" >> .env' >> /start.sh && \
    echo '    echo "APP_URL=http://localhost" >> .env' >> /start.sh && \
    echo '    echo "DB_CONNECTION=sqlite" >> .env' >> /start.sh && \
    echo '    echo "DB_DATABASE=/var/www/database/database.sqlite" >> .env' >> /start.sh && \
    echo '  fi' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    echo 'if [ ! -f database/database.sqlite ]; then' >> /start.sh && \
    echo '  echo "Creating database file..."' >> /start.sh && \
    echo '  touch database/database.sqlite' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    echo 'chmod 664 database/database.sqlite' >> /start.sh && \
    echo 'echo "Generating application key..."' >> /start.sh && \
    echo 'php artisan key:generate --force' >> /start.sh && \
    echo 'echo "Running migrations..."' >> /start.sh && \
    echo 'php artisan migrate --force' >> /start.sh && \
    echo 'echo "Clearing caches..."' >> /start.sh && \
    echo 'php artisan config:clear' >> /start.sh && \
    echo 'php artisan route:clear' >> /start.sh && \
    echo 'php artisan cache:clear' >> /start.sh && \
    echo 'echo "Starting server on port $PORT..."' >> /start.sh && \
    echo 'php artisan serve --host=0.0.0.0 --port=$PORT' >> /start.sh && \
    chmod +x /start.sh

EXPOSE 8000
CMD ["/start.sh"] 